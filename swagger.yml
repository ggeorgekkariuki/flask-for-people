# This file contains all the info to configure the web server to
# provide input parameter validation
# output response data validation
# URL endpoint definition
# and the Swagger UI

# Ensure this file has been pointed to in the main app via
# app.add_api('swagger.yml')

# View the SWAGGER UI at localhost:5000/api/ui

# This file defines the GET protocal with url path '/api/people'

swagger: "2.0"

info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Swagger REST Article
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api"

# Paths supported by the server application
paths:
  /people:
    get:
      operationId: "people.read_all"
      tags:
        - "People"
      summary: "The people data structure supported by the server application"
      description: "Read the entire list of people"
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of peope to get from people
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering people
          required: false
      responses:
        200:
          description: "Successful read people list operation"
          schema:
            type: "array"
            items:
              properties:
                fname:
                  type: "string"
                lname:
                  type: "string"
                timestamp:
                  type: "string"

    post:
      operationId: "people.create"
      tags:
        - people
      summary: Create a person and add it to the people list
      description: Create a person and add it to the people list
      parameters:
        - name: person
          in: body
          description: Person to create
          required: True
          schema:
            type: object
            properties:
              fname:
                type: string
                description: First name of person to create
              lname:
                type: string
                description: Last name of person to create
      responses:
        201:
          description: Successfully created person in list  

  /people/{lname}:
    get:
      operationId: "people.read_one"
      tags: 
        - "people"
      summary: Read one person from the list
      description: Read one person from the list
      parameters:
        - name: lname
          in: path
          description: Last name of the person to get from the list
          type: string
          required: True
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              fname:
                type: string
              lname:
                type: string
              timestamp:
                type: string

    put:
      operationId: "people.update"
      tags:
        - "people"
      summary: Update a person in the people list
      description: Update a person in the people list
      parameters:
        - name: lname
          in: path
          description: Last name of the person to update in the list
          type: string
          required: True
        - name: person
          in: body
          schema:
            type: object
            properties:
              fname:
                type: string
              lname:
                type: string
      responses:
        200:
          description: Successfully updated person in people list

  